/* eslint-disable block-scoped-var */
/* eslint-disable no-redeclare */
/* eslint-disable no-console */
/* eslint-disable camelcase */
/* eslint-disable unicorn/filename-case */
const HttpsProxyAgent = require("https-proxy-agent");
const httpsAgent = new HttpsProxyAgent({host: "192.168.100.54", port: "9090"})
const axios = require('axios')
const helpers = require('./helpers')
const db = require('./db')
const pjson = require('pjson');
const crypto = require('crypto')
const webhookSamples = require('./paystack/webhooks')
function selectIntegration(integrations, token) {
  return new Promise((resolve, reject) => {
    console.log('Choose an integration - ')
    let promptMessage = ''

    integrations.forEach((b, i) => {
      promptMessage += i + 1 + ' - ' + b.business_name + ' (' + b.id + ')\n'
    })
    let integration = helpers.prompt(promptMessage + '\nEnter the corresponding number - ')

    axios.post('https://api.paystack.co/user/switch_integration', { integration: integrations[parseInt(integration, 10) - 1].id }, { headers: { Authorization: 'Bearer ' + token, 'jwt-auth': true,  'User-Agent':`Paystack-CLI v${pjson.version}` } }).then((response) => {
      resolve(integrations[parseInt(integration, 10) - 1])
    }).catch(error => {
      if(error.response){
        console.error(error.response.data)
        return reject(error.response.data)
      }
     
     console.error(error);
    })
  })
}

async function refreshIntegration() {
  let user_role = db.read('selected_integration.logged_in_user_role')
  let integration = db.read('selected_integration')
  let token = ''
  let user
  let expiry = parseInt(db.read('token_expiry'), 10) * 1000
  let now = parseFloat(Date.now().toString())

  if (expiry > now) {
    token = db.read('token')
  } else {
    let password = helpers.prompt("What's your password: (" + db.read('user.email') + ') \n>', true)
    var [err, response] = await helpers.promiseWrapper(signIn(db.read('user.email'), password))
    if (err) {
      helpers.errorLog(err)
    }
    if (response && !response.mfa_required) {
      ({ token, expiry, user } = response)
      db.write('token', token)
      db.write('user', user)
      db.write('token_expiry', expiry)
      helpers.successLog('Login successful')
    } else if (response.mfa_required) {
      helpers.infoLog('MFA required')
      let mfa_code = helpers.prompt('Enter the 6-digit verification code generated by your authenticator app\n');
      [err, response] = await helpers.promiseWrapper(verifyToken(mfa_code, response.token))
      if (response) {
        ({ token, expiry, user } = response)
        db.write('token', token)
        db.write('user', user)
        db.write('token_expiry', expiry)
        helpers.successLog('Login successful')
      } else {
        this.error('Login failed' + JSON.stringify(err) + JSON.stringify(response))
      }
    } else {
      this.error('Login failed' + JSON.stringify(err) + JSON.stringify(response))
    }
    if (!response) {
      return false
    }
    token = response.token
  }

  var [err, integrationData] = await helpers.promiseWrapper(getIntegration(integration.id, token))
  if (err) {
    helpers.errorLog(err)
    return false
  }
  integrationData.logged_in_user_role = user_role
  db.write('selected_integration', integrationData)
  return true
}

function setWebhook(url, token, integration, domain = 'test') {
  return new Promise((resolve, reject) => {
    let data = {}
    data[domain + '_webhook_endpoint'] = url
    data.integration = integration
    let headers = {
      Authorization: 'Bearer ' + token,
      'jwt-auth': true,
      'User-Agent':`Paystack-CLI v${pjson.version}`
    }
    axios.put('https://api.paystack.co/integration/webhooks', data, { headers }).then(resp => {
      resolve(resp.data.message)
    }).catch(error => {
      if(error.response){
        reject(error.response.data.message);
        return
      }
      console.log(error.response.data)
      reject(error)
    })
  })
}

function getKeys(token, type = 'secret', domain = 'test') {
  return new Promise((resolve, reject) => {
    axios.get('https://api.paystack.co/integration/keys', { headers: { Authorization: 'Bearer ' + token, 'jwt-auth': true,  'User-Agent':`Paystack-CLI v${pjson.version}` } }).then(response => {
      let key = {};
      let keys = response.data.data;
      if (keys.length) {
        for (let i = 0; i < keys.length; i++) {
          if (keys[i].domain === domain && keys[i].type === type) {
            key = keys[i]
            break
          }
        }
      }
      resolve(key)
    }).catch(error => {
      if (error.response) {
        reject(error.response.data.message)
        return
      }
      reject(error)
    })
  })
}

function pingWebhook(flags) {
  // eslint-disable-next-line no-async-promise-executor
  return new Promise(async (resolve, reject) => {
    let canProceed
    try {
      canProceed = await refreshIntegration()
    } catch (error) {
      console.error(error)
    }
    if (!canProceed) {
      helpers.errorLog('- - - - - - - - Unable to ping webhook URL - - - - - - - -')
      return
    }
    let domain = 'test'
    if (flags.domain) {
      domain = flags.domain
    }
    let event = 'charge.success'
    if (flags.event) {
      event = flags.event
    }
    let eventObject = webhookSamples[event]
    if (eventObject) {
      // let key = db.query('selected_integration.keys', { domain, type: 'secret' }).key
      let token = db.read('token');
      let keyObject = await getKeys(token, 'secret', 'test');
      
      var hash = crypto.createHmac('sha512', keyObject.key).update(JSON.stringify(eventObject)).digest('hex')
      let uri = db.read('selected_integration.' + domain + '_webhook_endpoint')
      helpers.infoLog('-  - - - - - - -  - - -  - - - -   - - - - -  - - - - - - - - ')
      helpers.infoLog(`Sending sample ${event} event payload to ${uri}`)
      axios.post(uri, eventObject,
        {
          headers: {
            'x-paystack-signature': hash,
            'User-Agent':`Paystack-CLI v${pjson.version}`
          },
        },

      ).then(response => {
        resolve({
          code: response.status,
          text: response.statusText,
          data: response.data,
        })
      }).catch(error => {
        if (!error.response) {
          resolve({
            code: 999,
            text: error.message,
            data: error.stack
          }
          )
          return
        }

        resolve({
          code: error.response.status,
          text: error.response.statusText,
          data: error.response.data,
        })
      })
    } else {
      helpers.errorLog('Invalid event type - ' + event)
      reject()
    }
  })
}

function getIntegration(id, token) {
  return new Promise((resolve, reject) => {
    axios.get('https://api.paystack.co/integration/' + id,
      {
        headers: {
          Authorization: 'Bearer ' + token,
          'jwt-auth': true,
          'User-Agent':`Paystack-CLI v${pjson.version}`
        },
      }).then(response => {
        resolve(response.data.data)
      }).catch(error => {
        if (error.response) {
          reject(error.response.data.message)
          return
        }
        reject(error)
      })
  })
}

function signIn(email, password) {
  return new Promise((resolve, reject) => {
    let expiry = parseInt(db.read('token_expiry'), 10)
    let now = parseFloat(Date.now().toString())
    if (expiry > now) {
      resolve({
        token: db.read('token'),
        user: db.read('user'),
      })
      return
    }
    helpers.infoLog('Logging in')
    axios({
      url: 'https://api.paystack.co/login',
      method: 'POST',
      data: { email, password }
    }).then(response => {
      resolve(response.data.data)
    }).catch(error => {
      if (error.response) {
        helpers.errorLog(JSON.stringify(error.response.data.message) || 'Unable to sign in, please try again in a few minutes')
        reject(new Error('LOGIN ERROR: ' + error.response.data.message))
        return
      }
      console.error(error);
     
    })
  })
}
function verifyToken(totp, token) {
  return new Promise((resolve, reject) => {
    helpers.infoLog('Verifying token')
    axios({
      url: 'https://api.paystack.co/verify-mfa',
      method: 'POST',
      headers: {
        'jwt-auth': true,
        authorization: `Bearer ${token}`,
      },
      data: { totp },
    }).then(response => {
      resolve(response.data.data)
    }).catch(error => {
      helpers.errorLog(error.response.data.message || 'Unable to sign in, please try again in a few minutes')
      reject(new Error('LOGIN ERROR: ' + error.response.data.message))
    })
  })
}

module.exports = {
  signIn, getKeys, setWebhook, selectIntegration, getIntegration, pingWebhook, refreshIntegration, verifyToken,
}
