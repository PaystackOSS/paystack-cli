/* eslint-disable no-redeclare */
/* eslint-disable camelcase */
/**  global db **/
const {Command} = require('@oclif/command')
const db = require('../lib/db')
const shell = require('shelljs')
if (!shell.which('git')) {
  shell.echo('Sorry, this script requires git')
  shell.exit(1)
}
const helpers = require('../lib/helpers')
const Paystack = require('../lib/paystack')

class LoginClass extends Command {
  async run() {
    let token = ''
    let e
    let response
    let expiry = parseInt(db.read('token_expiry'), 10) * 1000
    let now = parseFloat(Date.now().toString())
    let user
    if (expiry > now) {
      token = db.read('token')
      user = db.read('user')
      helpers.successLog("You're already logged in")
    } else {
      var email = helpers.prompt('Email address\n')
      let password = helpers.prompt('Password\n', true);
      [e, response] = await helpers.promiseWrapper(Paystack.signIn(email, password))
      if (e) {
        this.error(e)
      }
      if (response && !response.mfa_required) {
        ({token, expiry,  user} = response)
        db.write('token', token)
        db.write('user', user)
        db.write('token_expiry', expiry)
        helpers.successLog('Login successful')
      } else if (response.mfa_required) {
        helpers.infoLog('MFA required')
        let mfa_code = helpers.prompt('Enter the 6-digit verification code generated by your authenticator app\n');
        [e, response] = await helpers.promiseWrapper(Paystack.verifyToken(mfa_code, response.token))
        if (response) {
          ({token, expiry,  user} = response)
          db.write('token', token)
          db.write('user', user)
          db.write('token_expiry', expiry)
          helpers.successLog('Login successful')
        } else {
          this.error('Login failed' + JSON.stringify(e) + JSON.stringify(response))
        }
      } else {
        this.error('Login failed' + JSON.stringify(e) + JSON.stringify(response))
      }
    }
    if (response || (token && user)) {
      var [err, integration] = await helpers.promiseWrapper(Paystack.selectIntegration(user.integrations, token))
      if (err) {
        this.error(err)
      }
      db.write('selected_integration', integration)
      let user_role = db.read('selected_integration.logged_in_user_role')
      var [err, integrationData] = await helpers.promiseWrapper(Paystack.getIntegration(integration.id, token))
      if (err) {
        this.error(err)
        return
      }
      integrationData.logged_in_user_role = user_role
      db.write('selected_integration', integrationData)
      var [err, keys] = await helpers.promiseWrapper(Paystack.getKeys(token))
      if (err) {
        this.error(err)
      }
      db.write('selected_integration.keys', keys)

      helpers.infoLog('Logged in as ' + user.email + ' -  ' + integration.business_name + ' (' + integration.id + ')')
    } else {
      this.error(' - -  - - -  - ')
    }
  }
}

LoginClass.description = 'Sign in to the CLI'

module.exports = LoginClass
